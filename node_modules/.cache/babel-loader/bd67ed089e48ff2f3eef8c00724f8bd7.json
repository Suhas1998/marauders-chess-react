{"ast":null,"code":"var _jsxFileName = \"/home/yash/projects/self/marauders-chess-react/src/Game/Game.jsx\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport Node from './Node/Node';\nimport initial_nodes from './initial_nodes.jsx';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isLeft,\n          isRight,\n          isBottom,\n          isTop\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          row: row,\n          col: col,\n          isLeft: isLeft,\n          isRight: isRight,\n          isBottom: isBottom,\n          isTop: isTop,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 37\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const initial_nodes_border = initial_nodes.get_initial_nodes();\n  const grid = [];\n\n  for (let row = 0; row < 10; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 15; col++) {\n      const isLeft = initial_nodes_border[row * 15 + col][0];\n      const isRight = initial_nodes_border[row * 15 + col][1];\n      const isBottom = initial_nodes_border[row * 15 + col][2];\n      const isTop = initial_nodes_border[row * 15 + col][3];\n      currentRow.push(createNode(col, row, isLeft, isRight, isBottom, isTop));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, isLeft, isRight, isBottom, isTop) => {\n  return {\n    col,\n    row,\n    isLeft,\n    isRight,\n    isTop,\n    isBottom,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/yash/projects/self/marauders-chess-react/src/Game/Game.jsx"],"names":["React","Component","Node","initial_nodes","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","render","map","rowIdx","node","nodeIdx","isLeft","isRight","isBottom","isTop","initial_nodes_border","get_initial_nodes","currentRow","push","createNode","distance","Infinity","isVisited","isWall","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Game.css';\nimport Node from './Node/Node';\nimport initial_nodes from './initial_nodes.jsx';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n    componentDidMount(){\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown(row, col){\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col){\n        if(!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp(){\n        this.setState({mouseIsPressed: false});\n    }\n\n    render(){\n        const {grid, mouseIsPressed} = this.state;\n        return (\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIdx) => {\n                    return (\n                        <div key = {rowIdx}>\n                            {row.map((node, nodeIdx) => {\n\n                                const {row, col, isLeft, isRight, isBottom, isTop} = node;\n                                return (\n                                    <Node\n                                        key = {nodeIdx}\n                                        row = {row}\n                                        col = {col}\n                                        isLeft = {isLeft}\n                                        isRight = {isRight}\n                                        isBottom = {isBottom}\n                                        isTop = {isTop}\n                                        mouseIsPressed = {mouseIsPressed}\n                                        onMouseDown = {(row, col) => this.handleMouseDown(row, col)}\n                                        onMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\n                                        onMouseUp = {() => this.handleMouseUp()}\n                                    ></Node>\n                                );\n                            })}\n                        </div>\n                    );\n\n                })}\n            </div>\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const initial_nodes_border = initial_nodes.get_initial_nodes();\n    const grid = [];\n    for(let row = 0; row < 10; row++) {\n        const currentRow = [];\n        for(let col = 0; col < 15; col++){\n            const isLeft = initial_nodes_border[row*15+col][0];\n            const isRight = initial_nodes_border[row*15+col][1];\n            const isBottom = initial_nodes_border[row*15+col][2];\n            const isTop = initial_nodes_border[row*15+col][3];\n            currentRow.push(createNode(col, row, isLeft, isRight, isBottom, isTop));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row, isLeft, isRight, isBottom, isTop) => {\n    return {\n        col,\n        row,\n        isLeft,\n        isRight,\n        isTop,\n        isBottom,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};"]},"metadata":{},"sourceType":"module"}